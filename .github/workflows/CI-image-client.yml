name: spherus-client-CI

on:
  push:
    tags:
      - "v*"

jobs:      
  dockerProd:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build the Vite project
        run: |
          VITE_URL_SPHERUS_API=https://staging.spherus.luc-dev.com npm run build

      - name: Install sshpass
        run: sudo apt-get install -y sshpass
        
      # - name: Test SSH Connection
      #   run: sshpass -p "${{ secrets.VPS_SSH_PASSWORD }}" ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"

      # - name: Test SSH Connectivity
      #   run: ssh -p ${{ secrets.VPS_PORT }} -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script:  |
            VERSION=${{ github.ref_name }}
            DEPLOY_PATH="/home/lukasz/apps/spherus/staging/client"
            echo "Deploying version: $VERSION"
            echo "Deployment path: $DEPLOY_PATH/$VERSION"
            
            # Create the versioned directory
            mkdir -p $DEPLOY_PATH/$VERSION || { echo "Failed to create directory"; exit 1; }

            # Check the directory exists
            ls -la $DEPLOY_PATH/$VERSION || { echo "Directory does not exist"; exit 1; }

            # Transfer the built dist files to the versioned directory
            # scp -r dist/* ${{ secrets.USER }}@${{ secrets.HOST }}:$DEPLOY_PATH/$VERSION/
            # rsync -avz -e "ssh -p ${{ secrets.PORT }} -o StrictHostKeyChecking=no" dist/ ${{ secrets.USER }}@${{ secrets.HOST }}:/$DEPLOY_PATH/$VERSION/ || { echo "Failed to transfer files"; exit 1; }
            rsync -avz -e "ssh -p ${{ secrets.PORT }} -vvv -o PreferredAuthentications=password -o StrictHostKeyChecking=no" dist/ ${{ secrets.USER }}@${{ secrets.HOST }}:$DEPLOY_PATH/$VERSION/ || { echo "Failed to transfer files"; exit 1; }
            echo "Update client version($VERSION) completed."

            # Update NGINX config to point to the new version
            sed -i "s|$DEPLOY_PATH/v[^/]*|$DEPLOY_PATH/$VERSION|" /home/lukasz/apps/spherus/staging/docker-compose.staging.yml || { echo "Failed to change docker-compose.staging.yml"; exit 1; }

            # Restart NGINX to apply the new configuration
            docker compose -f docker-compose.prod.yml down &&
            docker compose -f docker-compose.prod.yml up --build -d

            echo "Deployment completed."
