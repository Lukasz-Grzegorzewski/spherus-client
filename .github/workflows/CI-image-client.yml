name: spherus-client-CI

on:
  push:
    tags:
      - "v*"

jobs:      
  dockerProd:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build the Vite project
        run: |
          VITE_URL_SPHERUS_API=https://staging.spherus.luc-dev.com npm run build

      - name: Copy dist build files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          source: "dist/*"
          target: /home/lukasz/apps/spherus/staging/client/${{ github.ref_name }}/
          strip_components: 1

      - name: Update NGINX volume inside docker-compose.stagig.yml 
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            VERSION=${{ github.ref_name }}
            DEPLOY_PATH="/home/lukasz/apps/spherus/staging/client"

            # Update docker-compose.staging.yml to point to the new volume for nginx
            sed -i "s|$DEPLOY_PATH/v[^/]*|$DEPLOY_PATH/$VERSION|" /home/lukasz/apps/spherus/staging/docker-compose.staging.yml || { echo "Failed to change docker-compose.staging.yml"; exit 1; }
            
            # Restart NGINX to apply the new configuration
            docker compose -f docker-compose.prod.yml down &&
            docker compose -f docker-compose.prod.yml up --build -d

            echo "Deployment completed."

      # - name: Install sshpass
      #   run: sudo apt-get install -y sshpass
        
      # - name: Deploy to VPS via SCP using sshpass
      #   run: |
      #     VERSION=${{ github.ref_name }}
      #     DEPLOY_PATH="/home/lukasz/apps/spherus/staging/client"
      #     echo "Deploying version: $VERSION"
      #     echo "Deployment path: $DEPLOY_PATH/$VERSION"
          
      #     # Create the versioned directory on the server
      #     sshpass -p "${{ secrets.PASSWORD }}" ssh -p ${{ secrets.PORT }} -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "mkdir -p $DEPLOY_PATH/$VERSION"

      #     # Use sshpass to copy the built files via SCP
      #     sshpass -p "${{ secrets.PASSWORD }}" scp -P ${{ secrets.PORT }} -o StrictHostKeyChecking=no -r dist/* ${{ secrets.USER }}@${{ secrets.HOST }}:$DEPLOY_PATH/$VERSION/

      # - name: Update NGINX config and restart service
      #   run: |
      #     VERSION=${{ github.ref_name }}
      #     DEPLOY_PATH="/home/lukasz/apps/spherus/staging/client"

      #     # Update docker-compose.staging.yml to point to the new version
      #     sshpass -p "${{ secrets.PASSWORD }}" ssh -p ${{ secrets.PORT }} -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "
      #       sed -i 's|$DEPLOY_PATH/v[^/]*|$DEPLOY_PATH/$VERSION|' /home/lukasz/apps/spherus/staging/docker-compose.staging.yml &&
      #       docker compose -f /home/lukasz/apps/spherus/staging/docker-compose.staging.yml down &&
      #       docker compose -f /home/lukasz/apps/spherus/staging/docker-compose.staging.yml up --build -d"


      # - name: Test SSH Connection
      #   run: sshpass -p "${{ secrets.VPS_SSH_PASSWORD }}" ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"

      # - name: Test SSH Connectivity
      #   run: ssh -p ${{ secrets.VPS_PORT }} -o PreferredAuthentications=password -o PubkeyAuthentication=no -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"



      #       mv /home/lukasz/apps/spherus/staging/client/dist /home/lukasz/apps/spherus/staging/client/${{}}
      #       echo "Deploying version: $VERSION"
      #       echo "Deployment path: $DEPLOY_PATH/$VERSION"
            
      #       # Create the versioned directory
      #       mkdir -p $DEPLOY_PATH/$VERSION || { echo "Failed to create directory"; exit 1; }

      #       # Use SCP to copy files to the server
      #       # scp -P ${{ secrets.PORT }} -r dist/* ${{ secrets.USER }}@${{ secrets.HOST }}:$DEPLOY_PATH/$VERSION/ || { echo "Failed to transfer files"; exit 1; }

      #       # Use sshpass to copy files via SCP
      #       sshpass -p "${{ secrets.PASSWORD }}" scp -P ${{ secrets.PORT }} -r dist/* ${{ secrets.USER }}@${{ secrets.HOST }}:$DEPLOY_PATH/$VERSION/ || { echo "Failed to transfer files"; exit 1; }

      #       echo "Update client version($VERSION) completed."


